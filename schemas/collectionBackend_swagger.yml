openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: This is API for work with Postman Collection (schema link)
  termsOfService: http://swagger.io/terms/
  contact:
    email: danilin.aw@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost/api/v1
tags:
  - name: collection
    description: Everything about collection
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: item
    description: Access to item of collection (not used yet)
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /collection:
    post:
      tags:
        - collection
      summary: Create collection from JSON
      description: Create collection from JSON
      operationId: create
      requestBody:
        description: Create a new collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/collection'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'          
        '405':
          description: Invalid input
      security:
        - collection_auth:
            - write:collection
            - read:collection
    get:
      tags:
        - collection
      summary: Get list of collections
      description: Get list of collections
      operationId: getList
      parameters:
        - name: name
          in: query
          description: Filter by name
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collection'          
        '400':
          description: Invalid status value
      security:
        - collection_auth:
            - read:collection
  /collection/{collectionId}:
    get:
      tags:
        - collection
      summary: Get collection by Id
      description: Get collection by Id
      operationId: getById
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'          
            application/xml:
              schema:
                $ref: '#/components/schemas/collection'
        '400':
          description: Invalid ID supplied
        '404':
          description: Collection not found
      security:
        - api_key: []
        - collection_auth:
            - read:collection
    put:
      tags:
        - collection
      summary: Update full collection
      description: Update full collection
      operationId: update
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
      requestBody:
        description: Update full collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/collection'
        required: true
      responses:
        '405':
          description: Invalid input
      security:
        - collection_auth:
            - write:collection
            - read:collection
    patch:
      tags:
        - collection
      summary: Update info data of collection
      description: Update info data of collection
      operationId: patch
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
      requestBody:
        description: Update info data of collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/info'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/info'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'          
        '405':
          description: Invalid input
      security:
        - collection_auth:
            - write:collection
            - read:collection
    delete:
      tags:
        - collection
      summary: Deletes a collection
      description: delete a collection
      operationId: delete
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid collection value
      security:
        - collection_auth:
            - write:collection
            - read:collection
components:
  schemas:
    collection:
      type: object
      properties:
        info:
          "$ref": "#/components/schemas/info"
        item:
          type: array
          description: Items are the basic unit for a Postman collection. You can think
            of them as corresponding to a single API endpoint. Each Item has one request
            and may have multiple API responses associated with it.
          items:
            title: Items
            oneOf:
            - "$ref": "#/components/schemas/item"
            - "$ref": "#/components/schemas/item-group"
        event:
          "$ref": "#/components/schemas/event-list"
        variable:
          "$ref": "#/components/schemas/variable-list"
        auth:
          oneOf:
          - nullable: true
          - "$ref": "#/components/schemas/auth"
        protocolProfileBehavior:
          "$ref": "#/components/schemas/protocol-profile-behavior"
      required:
      - info
      - item
    auth-attribute:
      type: object
      title: Auth-attribute
      description: Represents an attribute for any authorization method provided by
        Postman. For example `username` and `password` are set as auth attributes for
        Basic Authentication method.
      properties:
        key:
          type: string
        value: {}
        type:
          type: string
      required:
      - key
    auth:
      type: object
      title: Auth
      description: Represents authentication helpers provided by Postman
      properties:
        type:
          type: string
          enum:
          - apikey
          - awsv4
          - basic
          - bearer
          - digest
          - edgegrid
          - hawk
          - noauth
          - oauth1
          - oauth2
          - ntlm
        noauth: {}
        apikey:
          type: array
          title: API Key Authentication
          description: The attributes for API Key Authentication.
          items:
            "$ref": "#/components/schemas/auth-attribute"
        awsv4:
          type: array
          title: AWS Signature v4
          description: The attributes for [AWS Auth](http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html).
          items:
            "$ref": "#/components/schemas/auth-attribute"
        basic:
          type: array
          title: Basic Authentication
          description: The attributes for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).
          items:
            "$ref": "#/components/schemas/auth-attribute"
        bearer:
          type: array
          title: Bearer Token Authentication
          description: The helper attributes for [Bearer Token Authentication](https://tools.ietf.org/html/rfc6750)
          items:
            "$ref": "#/components/schemas/auth-attribute"
        digest:
          type: array
          title: Digest Authentication
          description: The attributes for [Digest Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication).
          items:
            "$ref": "#/components/schemas/auth-attribute"
        edgegrid:
          type: array
          title: EdgeGrid Authentication
          description: The attributes for [Akamai EdgeGrid Authentication](https://developer.akamai.com/legacy/introduction/Client_Auth.html).
          items:
            "$ref": "#/components/schemas/auth-attribute"
        hawk:
          type: array
          title: Hawk Authentication
          description: The attributes for [Hawk Authentication](https://github.com/hueniverse/hawk)
          items:
            "$ref": "#/components/schemas/auth-attribute"
        ntlm:
          type: array
          title: NTLM Authentication
          description: The attributes for [NTLM Authentication](https://msdn.microsoft.com/en-us/library/cc237488.aspx)
          items:
            "$ref": "#/components/schemas/auth-attribute"
        oauth1:
          type: array
          title: OAuth1
          description: The attributes for [OAuth2](https://oauth.net/1/)
          items:
            "$ref": "#/components/schemas/auth-attribute"
        oauth2:
          type: array
          title: OAuth2
          description: Helper attributes for [OAuth2](https://oauth.net/2/)
          items:
            "$ref": "#/components/schemas/auth-attribute"
      required:
      - type
    certificate-list:
      title: Certificate List
      description: A representation of a list of ssl certificates
      type: array
      items:
        "$ref": "#/components/schemas/certificate"
    certificate:
      title: Certificate
      description: A representation of an ssl certificate
      type: object
      properties:
        name:
          description: A name for the certificate for user reference
          type: string
        matches:
          description: A list of Url match pattern strings, to identify Urls this certificate
            can be used for.
          type: array
          items:
            type: string
            description: An Url match pattern string
        key:
          description: An object containing path to file containing private key, on
            the file system
          type: object
          properties:
            src:
              description: The path to file containing key for certificate, on the file
                system
        cert:
          description: An object containing path to file certificate, on the file system
          type: object
          properties:
            src:
              description: The path to file containing key for certificate, on the file
                system
        passphrase:
          description: The passphrase for the certificate
          type: string
    cookie-list:
      title: Certificate List
      description: A representation of a list of cookies
      type: array
      items:
        "$ref": "#/components/schemas/cookie"
    cookie:
      type: object
      title: Cookie
      description: A Cookie, that follows the [Google Chrome format](https://developer.chrome.com/extensions/cookies)
      properties:
        domain:
          type: string
          description: The domain for which this cookie is valid.
        expires:
          type: string
          description: When the cookie expires.
        maxAge:
          type: string
        hostOnly:
          type: boolean
          description: True if the cookie is a host-only cookie. (i.e. a request's URL
            domain must exactly match the domain of the cookie).
        httpOnly:
          type: boolean
          description: Indicates if this cookie is HTTP Only. (if True, the cookie is
            inaccessible to client-side scripts)
        name:
          type: string
          description: This is the name of the Cookie.
        path:
          type: string
          description: The path associated with the Cookie.
        secure:
          type: boolean
          description: Indicates if the 'secure' flag is set on the Cookie, meaning
            that it is transmitted over secure connections only. (typically HTTPS)
        session:
          type: boolean
          description: True if the cookie is a session cookie.
        value:
          type: string
          description: The value of the Cookie.
      required:
      - domain
      - path
    description:
      description: A Description can be a raw text, or be an object, which holds the
        description along with its format.
      oneOf:
      - type: object
        title: Description
        properties:
          content:
            type: string
            description: The content of the description goes here, as a raw string.
          type:
            type: string
            description: |-
              Holds the mime type of the raw description content. E.g: 'text/markdown' or 'text/html'.
              The type is used to correctly render the description when generating documentation, or in the Postman app.
          version:
            description: Description can have versions associated with it, which should
              be put in this property.
      - type: string
    event-list:
      title: Event List
      type: array
      description: Postman allows you to configure scripts to run when specific events
        occur. These scripts are stored here, and can be referenced in the collection
        by their ID.
      items:
        "$ref": "#/components/schemas/event"
    event:
      title: Event
      description: Defines a script associated with an associated event name
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the enclosing event.
        listen:
          type: string
          description: Can be set to `test` or `prerequest` for test scripts or pre-request
            scripts respectively.
        script:
          "$ref": "#/components/schemas/script"
        disabled:
          type: boolean
          default: false
          description: Indicates whether the event is disabled. If absent, the event
            is assumed to be enabled.
      required:
      - listen
    header-list:
      title: Header List
      description: A representation for a list of headers
      type: array
      items:
        "$ref": "#/components/schemas/header"
    header:
      type: object
      title: Header
      description: Represents a single HTTP Header
      properties:
        key:
          description: This holds the LHS of the HTTP Header, e.g ``Content-Type`` or
            ``X-Custom-Header``
          type: string
        value:
          type: string
          description: The value (or the RHS) of the Header is stored in this field.
        disabled:
          type: boolean
          default: false
          description: If set to true, the current header will not be sent with requests.
        description:
          "$ref": "#/components/schemas/description"
      required:
      - key
      - value
    info:
      title: Information
      description: Detailed description of the info block
      type: object
      properties:
        name:
          type: string
          title: Name of the collection
          description: A collection's friendly name is defined by this field. You would
            want to set this field to a value that would allow you to easily identify
            this collection among a bunch of other collections, as such outlining its
            usage or content.
        _postman_id:
          type: string
          description: |-
            Every collection is identified by the unique value of this field. The value of this field is usually easiest to generate using a UID generator function. If you already have a collection, it is recommended that you maintain the same id since changing the id usually implies that is a different collection than it was originally.
            *Note: This field exists for compatibility reasons with Collection Format V1.*
        description:
          "$ref": "#/components/schemas/description"
        version:
          "$ref": "#/components/schemas/version"
        schema:
          description: 'This should ideally hold a link to the Postman schema that is
            used to validate this collection. E.g: https://schema.getpostman.com/collection/v1'
          type: string
      required:
      - name
      - schema
    item-group:
      title: Folder
      description: One of the primary goals of Postman is to organize the development
        of APIs. To this end, it is necessary to be able to group requests together.
        This can be achived using 'Folders'. A folder just is an ordered set of requests.
      type: object
      properties:
        name:
          type: string
          description: A folder's friendly name is defined by this field. You would
            want to set this field to a value that would allow you to easily identify
            this folder.
        description:
          "$ref": "#/components/schemas/description"
        variable:
          "$ref": "#/components/schemas/variable-list"
        item:
          description: Items are entities which contain an actual HTTP request, and
            sample responses attached to it. Folders may contain many items.
          type: array
          items:
            title: Items
            anyOf:
            - "$ref": "#/components/schemas/item"
            - "$ref": "#/components/schemas/item-group"
        event:
          "$ref": "#/components/schemas/event-list"
        auth:
          "$ref": "#/components/schemas/auth"
        protocolProfileBehavior:
          "$ref": "#/components/schemas/protocol-profile-behavior"
      required:
      - item
    item:
      type: object
      title: Item
      description: Items are entities which contain an actual HTTP request, and sample
        responses attached to it.
      properties:
        id:
          type: string
          description: A unique ID that is used to identify collections internally
        name:
          type: string
          description: A human readable identifier for the current item.
        description:
          "$ref": "#/components/schemas/description"
        variable:
          "$ref": "#/components/schemas/variable-list"
        event:
          "$ref": "#/components/schemas/event-list"
        request:
          "$ref": "#/components/schemas/request"
        response:
          type: array
          title: Responses
          items:
            "$ref": "#/components/schemas/response"
        protocolProfileBehavior:
          "$ref": "#/components/schemas/protocol-profile-behavior"
      required:
      - request
    protocol-profile-behavior:
      type: object
      title: Protocol Profile Behavior
      description: Set of configurations used to alter the usual behavior of sending
        the request
    proxy-config:
      title: Proxy Config
      description: Using the Proxy, you can configure your custom proxy into the postman
        for particular url match
      type: object
      properties:
        match:
          default: http+https://*/*
          description: The Url match for which the proxy config is defined
          type: string
        host:
          type: string
          description: The proxy server host
        port:
          type: integer
          minimum: 0
          default: 8080
          description: The proxy server port
        tunnel:
          description: The tunneling details for the proxy config
          default: false
          type: boolean
        disabled:
          type: boolean
          default: false
          description: When set to true, ignores this proxy configuration entity
    request:
      title: Request
      description: A request represents an HTTP request. If a string, the string is
        assumed to be the request URL and the method is assumed to be 'GET'.
      oneOf:
      - type: object
        title: Request
        properties:
          url:
            "$ref": "#/components/schemas/url"
          auth:
            "$ref": "#/components/schemas/auth"
          proxy:
            "$ref": "#/components/schemas/proxy-config"
          certificate:
            "$ref": "#/components/schemas/certificate"
          method:
            anyOf:
            - description: The Standard HTTP method associated with this request.
              type: string
              enum:
              - GET
              - PUT
              - POST
              - PATCH
              - DELETE
              - COPY
              - HEAD
              - OPTIONS
              - LINK
              - UNLINK
              - PURGE
              - LOCK
              - UNLOCK
              - PROPFIND
              - VIEW
            - description: The Custom HTTP method associated with this request.
              type: string
          description:
            "$ref": "#/components/schemas/description"
          header:
            oneOf:
            - "$ref": "#/components/schemas/header-list"
            - type: string
          body:
            oneOf:
            - type: object
              description: This field contains the data usually contained in the request
                body.
              properties:
                mode:
                  description: Postman stores the type of data associated with this
                    request in this field.
                  enum:
                  - raw
                  - urlencoded
                  - formdata
                  - file
                  - graphql
                raw:
                  type: string
                graphql:
                  type: object
                urlencoded:
                  type: array
                  items:
                    type: object
                    title: UrlEncodedParameter
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                      disabled:
                        type: boolean
                        default: false
                      description:
                        "$ref": "#/components/schemas/description"
                    required:
                    - key
                formdata:
                  type: array
                  items:
                    type: object
                    title: FormParameter
                    anyOf:
                    - properties:
                        key:
                          type: string
                        value:
                          type: string
                        disabled:
                          type: boolean
                          default: false
                          description: When set to true, prevents this form data entity
                            from being sent.
                        type:
                          type: string
                        contentType:
                          type: string
                          description: Override Content-Type header of this form data
                            entity.
                        description:
                          "$ref": "#/components/schemas/description"
                      required:
                      - key
                    - properties:
                        key:
                          type: string
                        src:
                          type: string
                        disabled:
                          type: boolean
                          default: false
                          description: When set to true, prevents this form data entity
                            from being sent.
                        type:
                          type: string
                        contentType:
                          type: string
                          description: Override Content-Type header of this form data
                            entity.
                        description:
                          "$ref": "#/components/schemas/description"
                      required:
                      - key
                file:
                  type: object
                  properties:
                    src:
                      oneOf:
                      - type: string
                        description: Contains the name of the file to upload. _Not the
                          path_.
                      - type: string
                        description: A null src indicates that no file has been selected
                          as a part of the request body
                    content:
                      type: string
                options:
                  type: object
                  description: Additional configurations and options set for various
                    body modes.
                disabled:
                  type: boolean
                  default: false
                  description: When set to true, prevents request body from being sent.
            - type: string
      - type: string
    response:
      title: Response
      description: A response represents an HTTP response.
      properties:
        id:
          description: A unique, user defined identifier that can  be used to refer
            to this response from requests.
          type: string
        originalRequest:
          "$ref": "#/components/schemas/request"
        responseTime:
          title: ResponseTime
          type: string
          description: The time taken by the request to complete. If a number, the unit
            is milliseconds. If the response is manually created, this can be set to
            `null`.
        timings:
          title: Response Timings
          description: Set of timing information related to request and response in
            milliseconds
          type: object
        header:
          title: Headers
          oneOf:
          - type: array
            title: Header
            description: No HTTP request is complete without its headers, and the same
              is true for a Postman request. This field is an array containing all the
              headers.
            items:
              oneOf:
              - "$ref": "#/components/schemas/header"
              - title: Header
                type: string
          - type: string
        cookie:
          type: array
          items:
            "$ref": "#/components/schemas/cookie"
        body:
          type: string
          description: The raw text of the response.
        status:
          type: string
          description: 'The response status, e.g: ''200 OK'''
        code:
          type: integer
          description: 'The numerical response code, example: 200, 201, 404, etc.'
    script:
      title: Script
      type: object
      description: A script is a snippet of Javascript code that can be used to to perform
        setup or teardown operations on a particular response.
      properties:
        id:
          description: A unique, user defined identifier that can  be used to refer
            to this script from requests.
          type: string
        type:
          description: 'Type of the script. E.g: ''text/javascript'''
          type: string
        exec:
          oneOf:
          - type: array
            description: This is an array of strings, where each line represents a single
              line of code. Having lines separate makes it possible to easily track
              changes made to scripts.
            items:
              type: string
          - type: string
        src:
          "$ref": "#/components/schemas/url"
        name:
          type: string
          description: Script name
    url:
      description: If object, contains the complete broken-down URL for this request.
        If string, contains the literal request URL.
      title: Url
      oneOf:
      - type: object
        properties:
          raw:
            type: string
            description: The string representation of the request URL, including the
              protocol, host, path, hash, query parameter(s) and path variable(s).
          protocol:
            type: string
            description: 'The protocol associated with the request, E.g: ''http'''
          host:
            title: Host
            description: 'The host for the URL, E.g: api.yourdomain.com. Can be stored
              as a string or as an array of strings.'
            oneOf:
            - type: string
            - type: array
              items:
                type: string
              description: The host, split into subdomain strings.
          path:
            oneOf:
            - type: string
            - type: array
              description: The complete path of the current url, broken down into segments.
                A segment could be a string, or a path variable.
              items:
                oneOf:
                - type: string
                - type: object
                  properties:
                    type:
                      type: string
                    value:
                      type: string
          port:
            type: string
            description: The port number present in this URL. An empty value implies
              80/443 depending on whether the protocol field contains http/https.
          query:
            type: array
            description: An array of QueryParams, which is basically the query string
              part of the URL, parsed into separate variables
            items:
              type: object
              title: QueryParam
              properties:
                key:
                  type: string
                value:
                  type: string
                disabled:
                  type: boolean
                  default: false
                  description: If set to true, the current query parameter will not
                    be sent with the request.
                description:
                  "$ref": "#/components/schemas/description"
          hash:
            description: Contains the URL fragment (if any). Usually this is not transmitted
              over the network, but it could be useful to store this in some cases.
            type: string
          variable:
            type: array
            description: Postman supports path variables with the syntax `/path/:variableName/to/somewhere`.
              These variables are stored in this field.
            items:
              "$ref": "#/components/schemas/variable"
      - type: string
    variable-list:
      title: Variable List
      description: |-
        Collection variables allow you to define a set of variables, that are a *part of the collection*, as opposed to environments, which are separate entities.
        *Note: Collection variables must not contain any sensitive information.*
      type: array
      items:
        "$ref": "#/components/schemas/variable"
    variable:
      title: Variable
      description: Using variables in your Postman requests eliminates the need to duplicate
        requests, which can save a lot of time. Variables can be defined, and referenced
        to from any part of a request.
      type: object
      properties:
        id:
          description: A variable ID is a unique user-defined value that identifies
            the variable within a collection. In traditional terms, this would be a
            variable name.
          type: string
        key:
          description: A variable key is a human friendly value that identifies the
            variable within a collection. In traditional terms, this would be a variable
            name.
          type: string
        value:
          description: The value that a variable holds in this collection. Ultimately,
            the variables will be replaced by this value, when say running a set of
            requests from a collection
        type:
          description: A variable may have multiple types. This field specifies the
            type of the variable.
          type: string
          enum:
          - string
          - boolean
          - any
          - number
        name:
          type: string
          description: Variable name
        description:
          "$ref": "#/components/schemas/description"
        system:
          type: boolean
          default: false
          description: When set to true, indicates that this variable has been set by
            Postman
        disabled:
          type: boolean
          default: false
      anyOf:
      - required:
        - id
      - required:
        - key
      - required:
        - id
        - key
    version:
      title: Collection Version
      description: Postman allows you to version your collections as they grow, and
        this field holds the version number. While optional, it is recommended that
        you use this field to its fullest extent!
      oneOf:
      - type: object
        properties:
          major:
            description: 'Increment this number if you make changes to the collection
              that changes its behaviour. E.g: Removing or adding new test scripts.
              (partly or completely).'
            minimum: 0
            type: integer
          minor:
            description: 'You should increment this number if you make changes that
              will not break anything that uses the collection. E.g: removing a folder.'
            minimum: 0
            type: integer
          patch:
            description: Ideally, minor changes to a collection should result in the
              increment of this number.
            minimum: 0
            type: integer
          identifier:
            description: 'A human friendly identifier to make sense of the version numbers.
              E.g: ''beta-3'''
            type: string
            maxLength: 10
          meta: {}
        required:
        - major
        - minor
        - patch
      - type: string
  requestBodies:
    collection:
      description: Collection object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collection'
    info:
      description: Info of collection
      content:
        application/json:
          schema:
              $ref: '#/components/schemas/info'
  securitySchemes:
    collection_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify collection
            read:pets: read collection
    api_key:
      type: apiKey
      name: api_key
      in: header